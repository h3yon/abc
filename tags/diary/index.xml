<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>diary - Tag - h3yon blog</title>
        <link>https://h3yon.github.io/tags/diary/</link>
        <description>diary - Tag - h3yon blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 02 Aug 2022 03:47:34 &#43;0900</lastBuildDate><atom:link href="https://h3yon.github.io/tags/diary/" rel="self" type="application/rss+xml" /><item>
    <title>상속보다는 컴포지션(조합)</title>
    <link>https://h3yon.github.io/use_composition/</link>
    <pubDate>Tue, 02 Aug 2022 03:47:34 &#43;0900</pubDate>
    <author>h3yon</author>
    <guid>https://h3yon.github.io/use_composition/</guid>
    <description><![CDATA[상속보다는 컴포지션(조합) Background 코드를 짜면서 상속으로 중복 코드도 줄일 수 있고,
더 효율적으로 생각되었다.
근데 언제부턴가 상속보다는 조합을 사용하란 말이 많아졌다.
예시를 보자.
1 2 3 4  public class PurchasedProduct { protected List&lt;Integer&gt; productNo; ... }   위의 클래스를 상속 받는 클래스가 있다고 가정하자.
1 2 3 4  public class Purchased extends PurchasedProduct { private List&lt;Integer&gt; dealNo; ... }   그런데 상위 PurchasedProduct 에서 List 대신 int[] productNo 로 바뀌었다고 가정하면]]></description>
</item>
<item>
    <title>정보처리기사 실기 벼락치기</title>
    <link>https://h3yon.github.io/daily-engineer-information/</link>
    <pubDate>Fri, 02 Jul 2021 23:47:34 &#43;0900</pubDate>
    <author>h3yon</author>
    <guid>https://h3yon.github.io/daily-engineer-information/</guid>
    <description><![CDATA[정보처리기사 실기 벼락치기 시도해보기 요구사항 확인   현행 시스템 파악: 현재 개발하고자 하는 시스템의 개발 범위를 설정하기 위해 구성과 기능, 연계 정보, 소프트웨어, 하드웨어, 네트워크 구성을 파악하는 과정
  현행시스템 파악 절차
  현행 시스템 구성 파악: 기간 업무, 지원 업무
  현행 시스템 기능 파악: 제공 기능 파악, 계층형 표시
  인터페이스 현황 평가: 데이터 종류, 통신 규약, 연계 유형
  아키텍처 구성 파악: 차상위 수준에서 파악]]></description>
</item>
</channel>
</rss>
