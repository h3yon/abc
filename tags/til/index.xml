<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>TIL - Tag - h3yon blog</title>
        <link>https://h3yon.github.io/tags/til/</link>
        <description>TIL - Tag - h3yon blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Fri, 15 Oct 2021 23:47:34 &#43;0900</lastBuildDate><atom:link href="https://h3yon.github.io/tags/til/" rel="self" type="application/rss+xml" /><item>
    <title>[스프링 핵심 원리 - 기본편] 복습일지3 (컴포넌트 스캔)</title>
    <link>https://h3yon.github.io/til-spring-core3/</link>
    <pubDate>Fri, 15 Oct 2021 23:47:34 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://h3yon.github.io/til-spring-core3/</guid>
    <description><![CDATA[[스프링 핵심 원리 - 기본편] 복습일지3 (컴포넌트 스캔) 컴포넌트 스캔? 컴포넌트 스캔은 스프링이 설정 정보가 없어도
자동으로 스프링 빈을 등록하는 기능이다
컴포넌트 스캔을 사용하려면 아래처럼
@ComponentScan을 설정 정보에 붙여준다.
아래처럼 제외도 가능하다.
1 2 3 4 5 6  @Configuration @ComponentScan( excludeFilters = @ComponentScan.Filter(type = FilterType.ANNOTATION, classes = Configuration.class) ) public class AutoAppConfig { }   컴포넌트 스캔은 @Component 애노테이션이 붙은 클래스를 스캔 후
스프링 빈으로 등록한다.
예시를 한번 봐보자.]]></description>
</item><item>
    <title>[스프링 핵심 원리 - 기본편] 복습 일지2 (싱글톤)</title>
    <link>https://h3yon.github.io/til-spring-core2/</link>
    <pubDate>Thu, 14 Oct 2021 23:47:34 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://h3yon.github.io/til-spring-core2/</guid>
    <description><![CDATA[[스프링 핵심 원리 - 기본편] 복습일지2 (싱글톤) 싱글톤 패턴 클래스의 인스턴스가 딱 1개만 생성되는 것을 보장하는 디자인패턴!
1 2 3 4 5  public class SingleService { private static final SingleService instance = new SingleService(); private SingleService() {} public static SingleService getInstance(){ return instance; } }   이 상태로 single.getInstance를 2번 사용했을 때
같은 객체가 나옴을 알 수 있다.
근데 싱글톤 패턴의 문제점도 꽤 많다는 걸 알게 되어서
나중에 한번 더 복습할 때 정리해야겠다.]]></description>
</item><item>
    <title>[스프링 핵심 원리 - 기본편] 복습 일지1 (빈)</title>
    <link>https://h3yon.github.io/til-spring-core1/</link>
    <pubDate>Wed, 13 Oct 2021 23:47:34 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://h3yon.github.io/til-spring-core1/</guid>
    <description><![CDATA[[스프링 핵심 원리 - 기본편] 복습일지1 (빈) 원래 설정 파일 즉, AppConfig에서
memberService -&gt; memberRepository -&gt; MemoryMemberRepository
이런 식으로 사용했었다.
근데 AppConfig를 @Configuration으로 해주고,
각각 memberService, memberRepository, MemoryMemberRepository에
@Bean으로 등록해주면 어떻게 되는지 보자.
@Configuration, @Bean으로 등록했을 때 원래 기존 방식은 아래와 같다.
1 2  AppConfig appConfig = new AppConfig(); MemberService memberService = appConfig.memberService();   @Configuration, @Bean으로 등록해주면
위의 부분이 어떻게 바뀌는지 보자.
1 2  ApplicationContext ac = new AnnotationConfigApplicationContext(AppConfig.]]></description>
</item><item>
    <title>[TIL]스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술</title>
    <link>https://h3yon.github.io/til-spring-basic/</link>
    <pubDate>Sun, 03 Oct 2021 23:47:34 &#43;0900</pubDate>
    <author>Author</author>
    <guid>https://h3yon.github.io/til-spring-basic/</guid>
    <description><![CDATA[[TIL] 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술 (주의) 주관적으로 정리하고 싶은 부분만 정리했습니다!
요약본을 보고 싶으신 분은 다른 게시글을 보시는 걸 추천합니다~!
본 강의: 인프런 - 스프링 입문 - 코드로 배우는 스프링 부트, 웹 MVC, DB 접근 기술
  객체를 계속 생성하는 것보다는
의존성 주입으로 재활용할 부분은 재활용하기
1 2 3 4 5  private final MemberRepository memberRepository; public MemberService(MemberRepository memberRepository) { this.memberRepository = memberRepository; }     스프링 컨테이너]]></description>
</item></channel>
</rss>
